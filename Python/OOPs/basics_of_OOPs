Object Oriented Programming (OOPs)
    - is a programming paradigm that structures code around objects rather than functions or logic 
    and it aims to model real world entities.

Oops revolves around these concepts:
class
object
Polymorphism
Encapsulation
Inheritance
Data Abstraction

class - class is blue print which has set of attributes and methods.
object - is an instance of a class so it can access all the attributes and methods of the class.
        and the object consists of its state, behavior and identity.

example:

class Dog:
    species = "canine"

    def __init__(self, name, age):
        self.name = name
        self.age = age

d1 = Dog('max', 5)
d2 = Dog('ron', 6)

Here, the we have created an dog object with the help of dog class

Self - this parameter is a reference to the current instance of the class.
        it allows us to access the attributes and the methods of the object.

__init__ - is a constructor and it is automatically called when an object is created. 
            it initializes the attributes of the class.


so here when we print the object directly like

print(d1) it prints something like this <__main__.Dog object at 0x0000014EAFA16A50>

to avoid that we have a constructor to do that.

MRO - Method Resolution order
so even if there are 2 parents it takes the order from left to right.

def __str__(self):
    return f"{name} {age}"

__str__ - is a constructor and it helps us to directly print the objects that we created with little changes made.


Inheritance:
    - it allows a child class to acquire properties and methods of parent class.
    - Single Inheritance - A child class inherits from single parent.
    - Multiple Inheritance - A child class inherits from more than one parent class.
    - Multilevel Inheritance - A child class inherits from parent class, which in turn inherits from another class.
    - Hierarchical Inheritance - A multiple child classes inherit from single parent class.
    - Hybrid Inheritance - A combination of two or more types of inheritance


Polymorphism - 
    - poly means many - morph means forms
    - allows methods to have same names but different functionalities.

    - Compile-time polymorphism (Method Overloading)
        - it allows methods or operators with the same name behave differently based on their input parameters or usage.
    - Run-time polymorphism (Method Overriding)
        - it overrides the existing method in the parent class or already defined in the parent class.
    - Duck Typing
        -  in Python refers to the concept where the type or class of an object is less important than the methods
            and/or attributes it possesses
    - Operator Overloading

Abstract Methods -
    - Abstract methods are kind of methods where they've only declaration but not a definition.
    - A class which has abstract methods are called Abstract Classes.
    - inorder to use abstract method or make a class abstract we have to import abc
        - from abc import ABC, abstractmethod
        - ABC ( ABSTRACT BASE CLASSES )
    - we mention a decorator saying this is an abstract class
        - @abstractmethod
    - if you inherit that class in an other and there's only declaration then it's also considered as abstract class
    - NOTE: to avoid the second class to be an abstract class or a abstract method define it by adding a method to it.
    - EX:
        from abc import ABC, abstractmethod

        class Computer(ABC): # here the ABC is added and this becomes subclass of ABC and becomes an abstract class.
            @abstractmethod # decorator to indicate that it is an abstract class.
            def process(self):
                pass # do nothing or nothing is here

        class Laptop(Computer):
            def process(self):
                print("it's running")
        
| Concept           | When to Use                                             | Why It Helps                              |
| ----------------- | ------------------------------------------------------- | ----------------------------------------- |
| **Class/Object**  | To model real-world things                              | Organizes your code around real concepts  |
| **Inheritance**   | When a class is a specialized version of another        | Avoids code duplication                   |
| **Polymorphism**  | When you want same method names for different behaviors | Makes code flexible and reusable          |
| **Encapsulation** | When you want to restrict access to internal data       | Prevents unintended changes to data       |
| **Abstraction**   | When you want to define a common interface              | Focuses on what needs to be done, not how |

class - is a blue print
object - is an instance of a class
inheritance - child class inherits the parent class or you can say specialized version of a class.
polymorphism - same functions but different functionalities
encapsulation - it restricts access to internal data
